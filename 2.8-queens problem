def print_board(board):
    """Print the chessboard with queens."""
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print()

def is_safe(board, row, col):
    """Check if it's safe to place a queen at board[row][col]."""
    # Check this column on upper side
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if j < 0:
            break
        if board[i][j]:
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if j >= len(board):
            break
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row):
    """Use backtracking to solve the N-Queens problem."""
    if row == len(board):
        print_board(board)
        return

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = True  # Place queen
            solve_n_queens(board, row + 1)  # Recur to place the rest
            board[row][col] = False  # Backtrack

def solve_8_queens():
    """Solve the 8-Queens problem and print all solutions."""
    board = [[False for _ in range(8)] for _ in range(8)]
    solve_n_queens(board, 0)
if __name__ == "__main__":

    solve_8_queens()
